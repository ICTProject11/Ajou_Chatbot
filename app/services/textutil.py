"""
텍스트/라벨 유틸리티 모음

- 숫자/학년/학기 정규화, 마크다운 헤더 파싱, 토크나이징
- 단과대/학과/전공 매핑 테이블(서비스 핵심 도메인 지식)
- 약어/별칭 → 표준 학과명 치환
- 간단 태그 추출(단과대/학과/전공/연도/학기)

이 모듈의 매핑(_SOFT_MAP_COLLEGE_DEPTS, _ALIAS_TO_DEPT, _MAJOR_ALIASES)은
질문에서 학과/전공을 약하게 알아내 스코프 힌트를 제공하는 데 쓰입니다.
"""

import re
from typing import List, Optional, Tuple, Dict

# ------------ 공통 정규식(헤더/학년/학기) ------------
HDR_RE = re.compile(r"^(#{1,6})\s+(.*)\s*$")
YEAR_RE = re.compile(r"([0-9])\s*학\s*년")
SEM_RE  = re.compile(r"([0-9])\s*학\s*기")
TERM_H4_RE = re.compile(r"([0-9])\s*학\s*년.*?([0-9])\s*학\s*기")

# ----------------------------------------------------
# 숫자/학년/학기 정규화
# ----------------------------------------------------
def normalize_numbers(q: str) -> str:
    """3-2, 3학년-2학기, 3학년2학기 → '3학년 2학기'로 정규화."""
    def _fmt(y, s): return f"{y}학년 {s}학기 "
    # ① 3-2 → 3학년 2학기
    q = re.sub(r"([0-9])\s*[-~]\s*([0-9])\s*학?\s*기?", lambda m: _fmt(m.group(1), m.group(2)), q)
    # ② 3학년-2학기 → 3학년 2학기
    q = re.sub(r"([0-9])\s*학\s*년\s*[-~]\s*([0-9])\s*학\s*기", lambda m: _fmt(m.group(1), m.group(2)), q)
    # ③ 3학년2학기(붙어있음) → 3학년 2학기
    q = re.sub(r"([0-9])\s*학\s*년\s*([0-9])\s*학\s*기", lambda m: _fmt(m.group(1), m.group(2)), q)

    # '학기' 뒤 공백 보정 (…1학기수강 → …1학기 수강)
    q = re.sub(r"(학기)(?=\S)", r"\1 ", q)
    # 다중 공백 정리
    q = re.sub(r"\s+", " ", q).strip()
    return q

def parse_year_semester(text: str) -> Tuple[Optional[str], Optional[str]]:
    """'3학년', '2학기' 같은 라벨을 문자열로 반환. 없으면 None."""
    y = YEAR_RE.search(text); s = SEM_RE.search(text)
    return (f"{y.group(1)}학년" if y else None, f"{s.group(1)}학기" if s else None)

def looks_like_term_header(title: str) -> bool:
    """H4 타이틀이 'n학년 m학기' 형태면 True"""
    return bool(TERM_H4_RE.search(title) or (YEAR_RE.search(title) and SEM_RE.search(title)))

# ----------------------------------------------------
# 토크나이저 (BM25용 한국어 강화)
#  - kiwi(형태소) 있으면 사용, 없으면 한글 2그램 + 기본 토큰
# ----------------------------------------------------
_KIWI = None
try:
    from kiwipiepy import Kiwi
    _KIWI = Kiwi()
except Exception:
    _KIWI = None

def _hangul_bigrams(seg: str) -> List[str]:
    return [seg[i:i+2] for i in range(len(seg)-1)] if len(seg) > 1 else [seg]

def tokenize_ko(text: str) -> List[str]:
    """
    한국어/혼합 쿼리 안정화를 위한 토크나이저.
    - 하이픈/중점/슬래시/대시 → 공백
    - 프라임/스마트쿼트/백틱 제거
    - 학년·학기 표현 정규화
    - kiwi 사용 가능 시 형태소 토큰, 아니면 한글 2그램 보강
    """
    text = text.lower()
    text = normalize_numbers(text)
    # 하이픈/중점/슬래시/엔대시/엠대시 → 공백
    text = re.sub(r"[·•/／\-\–—]", " ", text)
    # 프라임/스마트쿼트/액센트/백틱 제거
    text = re.sub(r"[‘’“”‟‚‛′″´`]", "", text)

    if _KIWI:
        toks = [t.form for t in _KIWI.tokenize(text)]
        toks = [t for t in toks if t.strip()]
        return toks

    # 폴백: 단어 + 한글 2그램 보강
    segs = re.findall(r"[가-힣]+|[a-z]+|\d+", text)
    out: List[str] = []
    for s in segs:
        if re.fullmatch(r"[가-힣]+", s):
            out.extend(_hangul_bigrams(s))
            out.append(s)
        else:
            out.append(s)
    return out

# ----------------------------------------------------
# PATH 헤더 추출
# ----------------------------------------------------
def path_of(doc: str) -> str:
    """
    문서 앞부분의
      [PATH] 단과대 > 학과 > (전공) > ...
    한 줄을 추출한다.
    """
    m = re.search(r"^$begin:math:display$PATH$end:math:display$\s*(.+)$", doc, flags=re.M)
    return m.group(1).strip() if m else ""

# ----------------------------------------------------
# 단과대 ↔ 학과 맵 (필요시 지속 확장)
#  - 검색 스코프/태그 추출의 기준 데이터
# ----------------------------------------------------
_SOFT_MAP_COLLEGE_DEPTS: Dict[str, List[str]] = {
    "공과대학": [
        "건설시스템공학과", "건축학과", "교통시스템공학과", "기계공학과",
        "미래자동차연계전공", "미래모빌리티공학과",
        "산업공학과", "융합시스템공학과",
        "응용화학과", "첨단신소재공학과", "화학공학과", "환경안전공학과",
    ],
    "소프트웨어융합대학": [
        "국방디지털융합학과", "데이터보안·활용융합 연계전공", "디지털미디어학과",
        "사이버보안학과", "소프트웨어학과", "인공지능융합학과", "인문사회데이터분석전공",
    ],
}

# 학과 → 단과대 역맵
_DEPT_TO_COLLEGE: Dict[str, str] = {dept: college for college, depts in _SOFT_MAP_COLLEGE_DEPTS.items() for dept in depts}

# ----------------------------------------------------
# 약어/축약어 → 학과명 정규화
# ----------------------------------------------------
_ALIAS_TO_DEPT: Dict[str, str] = {
    # 소융대
    "미디어": "디지털미디어학과",
    "디미": "디지털미디어학과",
    "국디": "국방디지털융합학과",
    "국디융": "국방디지털융합학과",
    "소웨": "소프트웨어학과",
    "컴퓨터공학과": "소프트웨어학과",
    "컴공": "소프트웨어학과",
    "사이버": "사이버보안학과",
    "사보": "사이버보안학과",
    "사이버보안": "사이버보안학과",
    "인지융": "인공지능융합학과",

    # 공과대
    "건시공": "건설시스템공학과",
    "교시공": "교통시스템공학과",
    "산공": "산업공학과",
    "융시공": "융합시스템공학과",
    "화공": "화학공학과",
}

# ----------------------------------------------------
# 전공명(학과 하위 트랙/전공/연계전공) → (소속학과, 단과대)
# ----------------------------------------------------
_MAJOR_ALIASES: Dict[str, Tuple[str, str]] = {
    # 소융대 예시
    "디지털미디어전공": ("디지털미디어학과", "소프트웨어융합대학"),
    "메타버스기획 마이크로전공": ("디지털미디어학과", "소프트웨어융합대학"),
    "디지털휴먼 마이크로전공": ("디지털미디어학과", "소프트웨어융합대학"),
    "메타버스(AR·VR)지식재산 마이크로전공": ("디지털미디어학과", "소프트웨어융합대학"),
    "공군ICT전공": ("국방디지털융합학과", "소프트웨어융합대학"),

    "데이터보안·활용융합(사이버보안융합) 연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안활용융합(사이버보안융합) 연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안활용융합(사이버보안융합)연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안·활용융합 연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안·활용융합연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안활용융합 연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안활용융합연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안·활용융합(블록체인/개인정보보호) 연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안·활용융합(블록체인/개인정보보호)연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안활용융합(블록체인/개인정보보호) 연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안활용융합(블록체인/개인정보보호)연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안·활용융합(클라우드융합보안) 연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안·활용융합(클라우드융합보안)연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안활용융합(클라우드융합보안) 연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),
    "데이터보안활용융합(클라우드융합보안)연계전공": ("데이터보안·활용융합 연계전공", "소프트웨어융합대학"),

    "사이버보안전공": ("사이버보안학과", "소프트웨어융합대학"),
    "블록체인마이크로전공": ("사이버보안학과", "소프트웨어융합대학"),

    "소프트웨어및컴퓨터공학전공": ("소프트웨어학과", "소프트웨어융합대학"),
    "ICT융합전공": ("소프트웨어학과", "소프트웨어융합대학"),
    "글로벌IT전공": ("소프트웨어학과", "소프트웨어융합대학"),
    "인공지능 마이크로전공": ("소프트웨어학과", "소프트웨어융합대학"),
    "인공지능마이크로전공": ("소프트웨어학과", "소프트웨어융합대학"),
    "인공지능지식재산 마이크로전공": ("소프트웨어학과", "소프트웨어융합대학"),
    "인공지능지식재산마이크로전공": ("소프트웨어학과", "소프트웨어융합대학"),

    "인공지능융합전공": ("인공지능융합학과", "소프트웨어융합대학"),
    "인문사회데이터분석전공": ("인문사회데이터분석전공", "소프트웨어융합대학"),

    # 공과대 트랙/전공
    "건설시스템공학전공": ("건설시스템공학과", "공과대학"),
    "건축학(5년)전공": ("건축학과", "공과대학"),
    "건축공학전공": ("건축학과", "공과대학"),
    "교통시스템공학전공": ("교통시스템공학과", "공과대학"),
    "기계공학전공": ("기계공학과", "공과대학"),
    "산업공학전공": ("산업공학과", "공과대학"),
    "융합시스템공학전공": ("융합시스템공학과", "공과대학"),
    "응용화학전공": ("응용화학과", "공과대학"),
    "바이오·헬스케어마이크로전공": ("응용화학과", "공과대학"),
    "바이오헬스케어마이크로전공": ("응용화학과", "공과대학"),
    "고분자공학 마이크로전공": ("응용화학과", "공과대학"),
    "고분자공학마이크로전공": ("응용화학과", "공과대학"),
    "전자소재공학 마이크로전공": ("응용화학과", "공과대학"),
    "전자소재공학마이크로전공": ("응용화학과", "공과대학"),
    "첨단신소재공학전공": ("첨단신소재공학과", "공과대학"),
    "수소에너지소재 마이크로전공": ("첨단신소재공학과", "공과대학"),
    "수소에너지소재마이크로전공": ("첨단신소재공학과", "공과대학"),
    "화학공학전공": ("화학공학과", "공과대학"),
    "환경안전공학전공": ("환경안전공학과", "공과대학"),

    # 연계전공(띄어쓰기 유무 모두 지원)
    "미래자동차 연계전공": ("미래자동차연계전공", "공과대학"),
    "미래자동차연계전공": ("미래자동차연계전공", "공과대학"),
}

# 외부에서도 이 맵들을 쓸 수 있도록 export
COLLEGE_TO_DEPTS = _SOFT_MAP_COLLEGE_DEPTS
DEPT_TO_COLLEGE = _DEPT_TO_COLLEGE
MAJOR_ALIASES = _MAJOR_ALIASES
ALIAS_TO_DEPT = _ALIAS_TO_DEPT

# ----------------------------------------------------
# 약어 치환
# ----------------------------------------------------
def _apply_aliases(text: str) -> str:
    """별칭/약어를 표준 학과명으로 치환."""
    out = text
    for alias, dept in _ALIAS_TO_DEPT.items():
        if alias in out:
            out = out.replace(alias, dept)
    return out

# ----------------------------------------------------
# 태그 약추출(전공/학과/단과대/연도/학기)
#  - 노이즈 많아도 "힌트"용으로만 사용 (LLM/프론트 힌트가 더 우선)
# ----------------------------------------------------
def soft_detect_tags(question: str) -> Dict[str, Optional[str]]:
    """
    전공명 우선 → 학과명 → 단과대 순으로 약하게 감지.
    (파일 색인 메타와 100% 일치하지 않아도 좋고, 한 개만 찾아도 OK)
    """
    q_raw = normalize_numbers(question)
    q = _apply_aliases(q_raw)  # 약어 먼저 정규화

    major: Optional[str] = None
    dept: Optional[str] = None
    college: Optional[str] = None

    # 1) 전공명 매칭 → 역추론
    for mj, (dp, col) in _MAJOR_ALIASES.items():
        if mj in q:
            major, dept, college = mj, dp, col
            break

    # 2) 학과명 매칭
    if dept is None:
        for d in _DEPT_TO_COLLEGE.keys():
            if d in q:
                dept = d
                college = _DEPT_TO_COLLEGE.get(d, college)
                break

    # 3) 단과대 매칭
    if college is None:
        for col in _SOFT_MAP_COLLEGE_DEPTS.keys():
            if col in q:
                college = col
                break

    year, semester = parse_year_semester(q)
    return {
        "college": college,
        "dept": dept,
        "major": major,
        "year": year,
        "semester": semester,
    }